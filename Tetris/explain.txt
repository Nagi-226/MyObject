# 俄罗斯方块项目

# 一. 相关知识点

# 1. Linux终端输出

```C
printf("\033[41;32m字体背景是红色，字是绿色\033[0m\n");
printf("\033[0;31m◆\033[0m ");//0 没有背景颜色，31字体红色
printf("\033[0;32m■\033[0m ");// 0 没有背景颜色，32字体绿色
字背景颜色范围: 40--49 字颜色: 30--39
40: 黑 30: 黑
41: 红 31: 红
42: 绿 32: 绿
43: 黄 33: 黄
44: 蓝 34: 蓝
45: 紫 35: 紫
46: 深绿 36: 深绿
47: 白色 37: 白色

printf("\033[%d;%dH", y , x); //控制光标打印位置

printf("\033[?25h");　　//显示光标
printf("\033[?25l");　　//隐藏光标
           
//控制光标位置函数
void gotoxy(int x, int y)
{ 
	printf("\033[%d;%dH", y+1 , x+1);
}    


reset命令//重置终端
```

# 2. 非阻塞输入

```C
#include <stdio.h>
#include <stdlib.h>
#define TTY_PATH            "/dev/tty"
#define STTY_US             "stty raw -echo -F " //终端禁止显示输入
#define STTY_DEF            "stty -raw echo -F " //恢复终端显示输入

//非阻塞输入
static int get_char()
{
    fd_set rfds;
    struct timeval tv;
    int ch = 0;
	
    FD_ZERO(&rfds);
    FD_SET(0, &rfds);
    tv.tv_sec = 0;
    tv.tv_usec = 10; //设置等待超时时间

    //检测键盘是否有输入
    if (select(1, &rfds, NULL, NULL, &tv) > 0)
    {
        ch = getchar(); 
    }
	
    return ch;
}

int main()
{
    system("reset");
	system(STTY_US TTY_PATH);  
    system(STTY_DEF TTY_PATH);	//恢复非阻塞IO设置
}

```

# 二. 俄罗斯方块制作过程

# 1. 打印背景边框

```C
//二维数组中的值，有三种可能
0 //空白
1 //边框◆
2 //落下的残留■

int map[21][12] = { 0 };
//下标0、11列赋值为1
//下标20行赋值为 1
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 1 1 1 1 1 1 1 1 1 1 1 
```

# 2. 让图形动态向下落

```C
#include <stdio.h>
#include <stdlib.h>

//定义结构体,用来代表一个对x,y的坐标点
struct coord
{
	int x;
	int y;
};


void initMap();//初始化背景边框
void showStaticMap();//显示静态背景图
void gotoxy(int x, int y);//控制打印光标的位置
void showDynamicShape();//打印动态图形
void moveDown();//向下移动

int map[21][12];//背景图
struct coord shape[4] = {{10, 0},{12, 0},{10, 1},{12, 1}};

int main(int argc, const char *argv[])
{
	system("reset");//执行reset命令,重置终端
	initMap();//初始化静态背景边框
	while(1)
	{
		showStaticMap();//打印静态背景图
		showDynamicShape();//显示动态图形
		fflush(stdout);//刷新缓存区
		moveDown();//向下移动
		sleep(1);
	}

	return 0;
}

//初始化背景边框
void initMap()
{
	int i,j;
	printf("\033[?25l");//隐藏光标
	for(i = 0; i < 21; i++)
	{
		for(j = 0; j < 12; j++)
		{
			if(j == 0 || j == 11 || i == 20)//下标0和11列,下标20行,赋值为1,代表边框
			{
				map[i][j] = 1;
			}
		}
	}
}
//显示静态背景图
void showStaticMap()
{
	int i,j;
	//每次打印静态背景边框从0,0开始打印
	gotoxy(0,0);
	for(i = 0; i < 21; i++)
	{
		for(j = 0; j < 12; j++)
		{
			if(map[i][j] == 1)//说明是边框
				printf("\033[0;31m◆\033[0m ");
			else if(map[i][j] == 2)//说明是残留物
				printf("\033[0;32m■\033[0m ");
			else if(map[i][j] == 0)//说明是空白
				printf("  ");//多敲一个空格,因为一个特殊字符占2个宽度
		}
		printf("\n");
	}
}
//控制光标位置函数
void gotoxy(int x, int y)
{ 
	printf("\033[%d;%dH", y+1 , x+1);
}  

//显示动态图形dynamic
void showDynamicShape()
{
	int i;
	for(i = 0; i < 4; i++)
	{
		gotoxy(shape[i].x, shape[i].y);
		printf("\033[0;33m■\033[0m ");
	}
}
//向下移动
void moveDown()
{
	int i;
	for(i = 0; i < 4; i++)
	{
		shape[i].y++;
	}
}
```

![image-20230113153410300](C基础笔记.assets/image-20230113153410300.png)

# 3. 落地后并下落新图形

```C
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 2 2 0 0 0 0 1 
1 0 0 0 0 2 2 0 0 0 0 1 
1 1 1 1 1 1 1 1 1 1 1 1 
```

![image-20230113160456659](C基础笔记.assets/image-20230113160456659.png)

```C
#include <stdio.h>
#include <stdlib.h>

//定义结构体,用来代表一个对x,y的坐标点
struct coord
{
	int x;
	int y;
};


void initMap();//初始化背景边框
void showStaticMap();//显示静态背景图
void gotoxy(int x, int y);//控制打印光标的位置
void showDynamicShape();//打印动态图形
void moveDown();//向下移动
void addStaticMap();//添加动态图形到静态背景图中
void drawDynamicShape();//画一个动态图形

int map[21][12];//背景图
//结构体数组,4个元素,因为有4对x,y坐标点
struct coord shape[4] = {{5, 0},{6, 0},{5, 1},{6, 1}};

int main(int argc, const char *argv[])
{ 
	system("reset");//执行reset命令,重置终端
	initMap();//初始化静态背景边框
	drawDynamicShape();//画一个动态图形
	while(1)
	{
		showStaticMap();//打印静态背景图
		showDynamicShape();//显示动态图形
		fflush(stdout);//刷新缓存区
		moveDown();//向下移动
		usleep(100000);
	}

	return 0;
}

//初始化背景边框
void initMap()
{
	int i,j;
	printf("\033[?25l");//隐藏光标
	for(i = 0; i < 21; i++)
	{
		for(j = 0; j < 12; j++)
		{
			if(j == 0 || j == 11 || i == 20)//下标0和11列,下标20行,赋值为1,代表边框
			{
				map[i][j] = 1;
			}
		}
	}
}
//显示静态背景图
void showStaticMap()
{
	int i,j;
	//每次打印静态背景边框从0,0开始打印
	gotoxy(0,0);
	for(i = 0; i < 21; i++)
	{
		for(j = 0; j < 12; j++)
		{
			if(map[i][j] == 1)//说明是边框
				printf("\033[0;31m◆\033[0m ");
			else if(map[i][j] == 2)//说明是残留物
				printf("\033[0;32m■\033[0m ");
			else if(map[i][j] == 0)//说明是空白
				printf("  ");//多敲一个空格,因为一个特殊字符占2个宽度
		}
		printf("\n");
	}
}
//控制光标位置函数
void gotoxy(int x, int y)
{ 
	printf("\033[%d;%dH", y+1 , x+1);
}  

//显示动态图形dynamic
void showDynamicShape()
{
	int i;
	for(i = 0; i < 4; i++)
	{
		gotoxy(shape[i].x*2, shape[i].y);//一个特殊图形占两个宽度
		printf("\033[0;33m■\033[0m ");
	}
}
//向下移动
void moveDown()
{
	int i;
	//这个循环,专门用来判断是否能够继续向下移动
	for(i = 0; i < 4; i++)
	{
		//y+1是为了提前下一个身位是否有边框和障碍物
		if(map[shape[i].y+1][shape[i].x] != 0)//说明遇到了1或2, 边框或障碍物	
		{//进入这个条件判断,就相当于落到最底部了
			addStaticMap();//添加到静态背景图
			drawDynamicShape();//再次画一个新的图形,重新开始从上往下落
			return;//提前结束函数
		}
	}
	//这个循环就是向下移动一个位置
	for(i = 0; i < 4; i++)
	{
		shape[i].y++;
	}
}
//添加到动态图形到静态背景图
void addStaticMap()
{
	int i;
    //将四对坐标点转换成对应二维数组的元素下标 赋值为2，代表残留物
	for(i = 0; i < 4; i++)
		map[shape[i].y][shape[i].x] = 2;
}
//画动态图形
void drawDynamicShape()
{
	//画一个田字格
	shape[0].x = 5;
	shape[0].y = 0;
	shape[1].x = 6;
	shape[1].y = 0;
	shape[2].x = 5;
	shape[2].y = 1;
	shape[3].x = 6;
	shape[3].y = 1;
}
```

![image-20230113163519445](C基础笔记.assets/image-20230113163519445.png)

# 4. 向左向右移动功能

```C
#include <stdio.h>
#include <stdlib.h>
#define TTY_PATH            "/dev/tty"
#define STTY_US             "stty raw -echo -F " //终端禁止显示输入
#define STTY_DEF            "stty -raw echo -F " //恢复终端显示输入

//定义结构体,用来代表一个对x,y的坐标点
struct coord
{
	int x;
	int y;
};


void initMap();//初始化背景边框
void showStaticMap();//显示静态背景图
void gotoxy(int x, int y);//控制打印光标的位置
void showDynamicShape();//打印动态图形
void moveDown();//向下移动
void addStaticMap();//添加动态图形到静态背景图中
void drawDynamicShape();//画一个动态图形
static int get_char();//非阻塞输入
void moveLeft();//向左移动
void moveRight();//向右移动

int map[21][12];//背景图
//结构体数组,4个元素,因为有4对x,y坐标点
struct coord shape[4] = {{5, 0},{6, 0},{5, 1},{6, 1}};

int main(int argc, const char *argv[])
{ 
	int i;
	char cmd;//用来保存输入按键
	system("reset");//执行reset命令,重置终端
	system(STTY_US TTY_PATH);  
	initMap();//初始化静态背景边框
	drawDynamicShape();//画一个动态图形
	while(1)
	{
		showStaticMap();//打印静态背景图
		showDynamicShape();//显示动态图形
		fflush(stdout);//刷新缓存区
		for(i = 0; i < 20; i++)//循环20次等价于1s
		{
			//按键输入
			cmd = get_char();
			if(cmd == 'w')
			{
				printf("change\n");
			}
			else if(cmd == 'a')
			{
				moveLeft();
			}
			else if(cmd == 's') 
			{
				break;
			}
			else if(cmd == 'd')
			{
				moveRight();
			}
			else if(cmd == 3)//ctrl + c
			{
    			system(STTY_DEF TTY_PATH);	//恢复非阻塞IO设置
				return 0;
			}
			usleep(50000);
		}
		moveDown();//向下移动
	}

	return 0;
}

//初始化背景边框
void initMap()
{
	int i,j;
	printf("\033[?25l");//隐藏光标
	for(i = 0; i < 21; i++)
	{
		for(j = 0; j < 12; j++)
		{
			if(j == 0 || j == 11 || i == 20)//下标0和11列,下标20行,赋值为1,代表边框
			{
				map[i][j] = 1;
			}
		}
	}
}
//显示静态背景图
void showStaticMap()
{
	int i,j;
	//每次打印静态背景边框从0,0开始打印
	//gotoxy(0,0);
	for(i = 0; i < 21; i++)
	{
		gotoxy(0, i);//打印图形的时候,从每行的第0列开始
		for(j = 0; j < 12; j++)
		{
			if(map[i][j] == 1)//说明是边框
				printf("\033[0;31m◆\033[0m ");
			else if(map[i][j] == 2)//说明是残留物
				printf("\033[0;32m■\033[0m ");
			else if(map[i][j] == 0)//说明是空白
				printf("  ");//多敲一个空格,因为一个特殊字符占2个宽度
		}
		printf("\n");
	}
}
//控制光标位置函数
void gotoxy(int x, int y)
{ 
	printf("\033[%d;%dH", y+1 , x+1);
}  

//显示动态图形dynamic
void showDynamicShape()
{
	int i;
	for(i = 0; i < 4; i++)
	{
		gotoxy(shape[i].x*2, shape[i].y);//一个特殊图形占两个宽度
		printf("\033[0;33m■\033[0m ");
	}
}
//向下移动
void moveDown()
{
	int i;
	//这个循环,专门用来判断是否能够继续向下移动
	for(i = 0; i < 4; i++)
	{
		//y+1是为了提前下一个身位是否有边框和障碍物
		if(map[shape[i].y+1][shape[i].x] != 0)//说明遇到了1或2, 边框或障碍物
		{//进入这个条件判断,就相当于落到最底部了
			addStaticMap();//添加到静态背景图
			drawDynamicShape();//再次画一个新的图形,重新开始从上往下落
			return;//提前结束函数
		}
	}
	//这个循环就是向下移动一个位置
	for(i = 0; i < 4; i++)
	{
		shape[i].y++;
	}
}
//添加到动态图形到静态背景图
void addStaticMap()
{
	int i;
	for(i = 0; i < 4; i++)
		map[shape[i].y][shape[i].x] = 2;
}
//画动态图形
void drawDynamicShape()
{
	//画一个田字格
	shape[0].x = 5;
	shape[0].y = 0;
	shape[1].x = 6;
	shape[1].y = 0;
	shape[2].x = 5;
	shape[2].y = 1;
	shape[3].x = 6;
	shape[3].y = 1;
}

//非阻塞输入
static int get_char()
{
    fd_set rfds;
    struct timeval tv;
    int ch = 0;
	
    FD_ZERO(&rfds);
    FD_SET(0, &rfds);
    tv.tv_sec = 0;
    tv.tv_usec = 10; //设置等待超时时间

    //检测键盘是否有输入
    if (select(1, &rfds, NULL, NULL, &tv) > 0)
    {
        ch = getchar(); 
    }
	
    return ch;
}
//向左移动
void moveLeft()
{
	int i;
	//在移动之前加容错判断,是否碰到残留物或边框
	for(i = 0; i < 4; i++)
	{
		if(map[shape[i].y][shape[i].x-1] != 0)//说明遇到边框或残留物
		{
			return;//提前结束函数
		}
	}
	//向左移动
	for(i = 0; i < 4; i++)
		shape[i].x--;
}
//向右移动 
void moveRight()
{
	int i;
	//在移动之前加容错判断,是否碰到残留物或边框
	for(i = 0; i < 4; i++)
	{
		if(map[shape[i].y][shape[i].x+1] != 0)//说明遇到边框或残留物
		{
			return;//提前结束函数
		}
	}
	//向右移动
	for(i = 0; i < 4; i++)
		shape[i].x++;
}
```

![image-20230114134434818](C基础笔记.assets/image-20230114134434818.png)

# 5. 消除满行+游戏得分+难度

```C
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 1 
1 2 0 0 0 0 0 2 0 0 2 1 
1 2 0 2 0 2 0 2 0 0 2 1 
1 2 2 2 2 2 2 2 2 2 2 1 
1 1 1 1 1 1 1 1 1 1 1 1
    0123
    holl
    a[1] = a[2]
    a[2] = a[3]
    a[i] = a[i+1]
    
    //第i行是满行
    a[i][j] = a[i-1][j];
```